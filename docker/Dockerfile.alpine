FROM alpine:3.10
RUN apk add --update \
  bison \
  build-base \
  clang-dev \
  clang-static \
  curl \
  cmake \
  elfutils-dev \
  flex-dev \
  git \
  linux-headers \
  llvm8-dev \
  llvm8-static \
  python \
  zlib-dev

# Put LLVM directories where CMake expects them to be
RUN ln -s /usr/lib/cmake/llvm8 /usr/lib/cmake/llvm
RUN ln -s /usr/include/llvm8/llvm /usr/include/llvm
RUN ln -s /usr/include/llvm8/llvm-c /usr/include/llvm-c

# Alpine currently does not have a package for bcc. Until they do,
# we'll peg the alpine build to bcc v0.8.0
#
# We're building here so docker can cache the build layer
WORKDIR /

RUN git clone --depth 1 --branch v0.10.0 https://github.com/iovisor/bcc.git && \
    cd bcc/ && \
    git submodule init && \
    git submodule update

RUN find /usr/include/linux/ -type f -name \*.h -not -name stddef.h -exec sed -e 's/__always_inline /__attribute__((always_inline)) /' -i '{}' \;

RUN cd /bcc && mkdir build && cd build && cmake .. && make install -j4 && \
  cp src/cc/libbcc.a /usr/local/lib64/libbcc.a && \
  cp src/cc/libbcc-loader-static.a /usr/local/lib64/libbcc-loader-static.a && \
  cp src/cc/libbcc_bpf.a /usr/local/lib64/libbcc_bpf.a

RUN cd /bcc/src/cc/libbpf/src/ && make && make install && cp *.so* *.a /usr/local/lib64/

COPY build.sh /build.sh
ENTRYPOINT ["/bin/sh", "/build.sh"]
