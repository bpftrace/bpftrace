ARG BASE=bionic
FROM ubuntu:${BASE}

ARG BASE
ARG LLVM_VERSION="8"
ARG CMAKE_VER="3.16"
ARG CMAKE_BUILD="2"
ARG bcc_ref="v0.12.0"
ARG bcc_org="iovisor"

ENV LLVM_VERSION=$LLVM_VERSION
ENV CMAKE_VER=${CMAKE_VER}
ENV CMAKE_BUILD="${CMAKE_BUILD}"
ENV BASE=${BASE}

RUN apt-get update && apt-get install -y \
      bison \
      binutils-dev \
      build-essential \
      flex \
      g++ \
      git \
      libelf-dev \
      zlib1g-dev \
      libiberty-dev \
      libbfd-dev \
      libedit-dev \
      systemtap-sdt-dev \
      python3 \
      quilt

# Install from source if using xenial due to incompatibility with older cmake
RUN if [ "${BASE}" = "xenial" ]; then \
    apt-get install -y make python libssl-dev \
    && version=${CMAKE_VER} \
    && build=${CMAKE_BUILD} \
    && mkdir -p /tmp \
    && cd /tmp \
    && curl -OL https://cmake.org/files/v${version}/cmake-${version}.${build}.tar.gz \
    && tar -xzvf cmake-${CMAKE_VER}.$build.tar.gz \
    && cd cmake-${CMAKE_VER}.$build/ \
    && ./bootstrap --parallel=$(nproc) \
    && make -j$(nproc) \
    && make install \
    ; else \
    apt install -y cmake \
    ; fi

# Install C++17 compatible compiler
RUN if [ "${BASE}" = "xenial" ]; then \
    apt-get install -y software-properties-common \
    && add-apt-repository -y ppa:ubuntu-toolchain-r/test \
    && apt update \
    ; fi \
    ; apt install -y g++-8 \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 \
                           --slave /usr/bin/g++ g++ /usr/bin/g++-8

# Build BCC and install static libs

COPY build.sh /build.sh
COPY embedded_build.sh /embedded_build.sh
RUN chmod 755 /build.sh /embedded_build.sh
ENTRYPOINT ["bash", "/embedded_build.sh"]
