#!/usr/bin/env bpftrace
/*
 * killsnoop	Trace signals issued by the kill() syscall.
 *		For Linux, uses bpftrace and eBPF.
 * 
 * Example of usage:
 * 
 * # ./killsnoop.bt
 * Attaching 3 probes...
 * Tracing kill() signals... Hit Ctrl-C to end.
 * TIME                PID COMM              SIG   TPID RESULT
 * 00:09:37.345938   22485 bash                2  23856      0
 * 00:09:40.838452   22485 bash                2  23856     -3
 * 00:09:31.437104   22485 bash               15  23814     -3
 * 
 * The first line showed a SIGINT (2) sent from PID 22485 (a bash shell) to
 * PID 23856. The result, 0, means success. The next line shows the same signal
 * sent, which resulted in -3, a failure (likely because the target process
 * no longer existed).
 *
 * This is a bpftrace version of the bcc tool of the same name.
 * The bcc version provides command line options to customize the output.
 *
 * Copyright 2018 Netflix, Inc.
 *
 * 07-Sep-2018	Brendan Gregg	Created this.
 */

BEGIN
{
	printf("Tracing kill() signals... Hit Ctrl-C to end.\n");
	printf("%-15s %7s %-16s %4s %6s %s\n",
		"TIME", "PID", "COMM", "SIG", "TPID", "RESULT");
}

tracepoint:syscalls:sys_enter_kill
{
	@tpid[tid] = args.pid;
	@tsig[tid] = args.sig;
}

tracepoint:syscalls:sys_exit_kill
/@tpid[tid]/
{
	printf("%-15s %7d %-16s %4d %6d %6d\n",
		strftime("%H:%M:%S.%f", nsecs),
		pid, comm, @tsig[tid], @tpid[tid], args.ret);
	delete(@tpid, tid);
	delete(@tsig, tid);
}
