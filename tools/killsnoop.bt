#!/usr/bin/env bpftrace
// killsnoop	Trace signals issued by the kill(),tkill(),tgkill() syscall.
// 		For Linux, uses bpftrace and eBPF.
// Example of usage:
// # ./killsnoop.bt
// Attached 8 probes
// Tracing kill(),tkill(),tgkill() signals... Hit Ctrl-C to end.
// TIME                 PID COMM                    SIG     TPID RESULT
// 16:51:52.961181   589458 bash                 SIGINT   589458      0
// 16:51:55.177019   589458 bash                 SIGINT   234567     -3
// 16:51:57.061029   589458 bash                SIGTERM    23456     -3
// 16:52:02.717378   589458 bash                SIGTERM        1     -1
// The first line showed a SIGINT sent from PID 589458 (a bash shell) to
// PID 589458. The result, 0, means success. The next line shows the same signal
// sent, which resulted in -3, a failure (likely because the target process
// no longer existed).
// This is a bpftrace version of the bcc tool of the same name.
// The bcc version provides command line options to customize the output.
// Copyright 2018 Netflix, Inc.
// 07-Sep-2018	Brendan Gregg	Created this.
// 27-May-2025	Rong Tao	Support tkill(), tgkill()

BEGIN {
  @SIG_STR = "N/A";
  @SIG_STR = "SIGHUP";
  @SIG_STR = "SIGINT";
  @SIG_STR = "SIGQUIT";
  @SIG_STR = "SIGILL";
  @SIG_STR = "SIGTRAP";
  @SIG_STR = "SIGABRT";
  @SIG_STR = "SIGBUS";
  @SIG_STR = "SIGFPE";
  @SIG_STR = "SIGKILL";
  @SIG_STR = "SIGUSR1";
  @SIG_STR = "SIGSEGV";
  @SIG_STR = "SIGUSR2";
  @SIG_STR = "SIGPIPE";
  @SIG_STR = "SIGALRM";
  @SIG_STR = "SIGTERM";
  @SIG_STR = "SIGSTKFLT";
  @SIG_STR = "SIGCHLD";
  @SIG_STR = "SIGCONT";
  @SIG_STR = "SIGSTOP";
  @SIG_STR = "SIGTSTP";
  @SIG_STR = "SIGTTIN";
  @SIG_STR = "SIGTTOU";
  @SIG_STR = "SIGURG";
  @SIG_STR = "SIGXCPU";
  @SIG_STR = "SIGXFSZ";
  @SIG_STR = "SIGVTALRM";
  @SIG_STR = "SIGPROF";
  @SIG_STR = "SIGWINCH";
  @SIG_STR = "SIGIO";
  @SIG_STR = "SIGPWR";
  @SIG_STR = "SIGSYS";

  // The real-time signal is relatively complex, so it is omitted and the
  // signal value is printed directly.
  // POSIX SIGRTMIN is 34 or 35, see signal(7)
  // 32 in linux kernel, 34 in glibc, 35 in musl-libc

  printf("Tracing kill(),tkill(),tgkill() signals... Hit Ctrl-C to end.\n");
  printf("%-15s %8s %-16s %10s %8s %s\n", "TIME", "PID", "COMM", "SIG", "TPID", "RESULT");
}

tracepoint:syscalls:sys_enter_kill,
tracepoint:syscalls:sys_enter_tkill,
tracepoint:syscalls:sys_enter_tgkill
{
  @tpid = args.pid;
  @tsig = args.sig;
}

tracepoint:syscalls:sys_exit_kill,
tracepoint:syscalls:sys_exit_tkill,
tracepoint:syscalls:sys_exit_tgkill
/@tpid[tid]/ {
  printf("%-15s %8d %-16s", strftime("%H:%M:%S.%f", nsecs), pid, comm);
  if (!has_key(@SIG_STR, @tsig[tid])) {
    printf(" %10d", @tsig[tid]);
  } else {
    printf(" %10s", @SIG_STR[@tsig[tid]]);
  }
  printf(" %8d %6d\n", @tpid[tid], args.ret);
  delete(@tpid, tid);
  delete(@tsig, tid);
}

END {
  clear(@tpid);
  clear(@tsig);
  clear(@SIG_STR);
}
