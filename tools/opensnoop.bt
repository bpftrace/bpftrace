#!/usr/bin/env bpftrace
/*
 * opensnoop	Trace open() syscalls.
 *		For Linux, uses bpftrace and eBPF.
 * 
 * Example of usage:
 * 
 * # ./opensnoop.bt
 * Attaching 3 probes...
 * Tracing open syscalls... Hit Ctrl-C to end.
 * PID    COMM               FD ERR PATH
 * 2440   snmp-pass           4   0 /proc/cpuinfo
 * 2440   snmp-pass           4   0 /proc/stat
 * 25706  ls                  3   0 /etc/ld.so.cache
 * 25706  ls                  3   0 /lib/x86_64-linux-gnu/libselinux.so.1
 * 25706  ls                  3   0 /lib/x86_64-linux-gnu/libc.so.6
 * 25706  ls                  3   0 /lib/x86_64-linux-gnu/libpcre.so.3
 * 25706  ls                  3   0 /lib/x86_64-linux-gnu/libdl.so.2
 * 25706  ls                  3   0 /lib/x86_64-linux-gnu/libpthread.so.0
 * 25706  ls                  3   0 /proc/filesystems
 * 25706  ls                  3   0 /usr/lib/locale/locale-archive
 * 25706  ls                  3   0 .
 * [...]
 * 2440   snmp-pass           4   0 /proc/cpuinfo
 * 2440   snmp-pass           4   0 /proc/stat
 * 22884  pickup             12   0 maildrop
 * 2440   snmp-pass           4   0 /proc/cpuinfo
 * 2440   snmp-pass           4   0 /proc/stat
 * 
 * While tracing, at "ls" command was launched: the libraries it uses can be seen
 * as they were opened.
 * 
 * opensnoop can be useful for discovering configuration and log files, if used
 * during application startup.
 *
 * This is a bpftrace version of the bcc tool of the same name.
 * The bcc version provides command line options to customize the output.
 *
 * Copyright 2018 Netflix, Inc.
 *
 * 08-Sep-2018	Brendan Gregg	Created this.
 */

BEGIN
{
	printf("Tracing open syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %4s %3s %s\n", "PID", "COMM", "FD", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/@filename[tid]/
{
	$ret = args.ret;
	$fd = $ret >= 0 ? $ret : -1;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %4d %3d %s\n", pid, comm, $fd, $errno,
	    str(@filename[tid]));
	delete(@filename, tid);
}

END
{
	clear(@filename);
}
