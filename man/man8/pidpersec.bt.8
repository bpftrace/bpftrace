.TH pidpersec 8  "2018-09-06" "USER COMMANDS"
.SH NAME
pidpersec.bt \- Count new processes (via fork()). Uses bpftrace/eBPF.
.SH SYNOPSIS
.B pidpersec.bt
.SH DESCRIPTION
pidpersec shows how many new processes were created each second. There
can be performance issues caused by many short-lived processes, which may not
be visible in sampling tools like top(1). pidpersec provides one way to
investigate this behavior.

This works by tracing the tracepoint:sched:sched_process_fork tracepoint.

Since this uses BPF, only the root user can use this tool.
.SH REQUIREMENTS
CONFIG_BPF and bpftrace.
.SH EXAMPLES
.TP
Count new processes, printing per-second summaries until Ctrl-C is hit:
#
.B pidpersec.bt
.SH FIELDS
.TP
1st
Count of processes (after "@")
.SH OVERHEAD
This traces kernel forks, and maintains an in-kernel count which is
read asynchronously from user-space. As the rate of this is generally expected to
be low (<< 1000/s), the overhead is also expected to be negligible.
.SH SOURCE
This is from bpftrace.
.IP
https://github.com/iovisor/bpftrace
.PP
Also look in the bpftrace distribution for a companion _examples.txt file
containing example usage, output, and commentary for this tool.

This is a bpftrace version of the bcc tool of the same name. The bcc tool
may provide more options and customizations.
.IP
https://github.com/iovisor/bcc
.SH OS
Linux
.SH STABILITY
Unstable - in development.
.SH AUTHOR
Brendan Gregg
.SH SEE ALSO
top(1)
