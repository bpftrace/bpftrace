.TH execsnoop 8  "2018-09-11" "USER COMMANDS"
.SH NAME
execsnoop.bt \- Trace new processes via exec() syscalls. Uses bpftrace/eBPF.
.SH SYNOPSIS
.B execsnoop.bt
.SH DESCRIPTION
This traces when processes call exec() (execve()). It is handy for identifying new
processes created via the usual fork()->exec() sequence. Note that the
return value is not currently traced, so the exec() may have failed.

This tool is useful for debugging shell scripts, including application startup.
It is also useful for identifying a type of performance issue: a flood of
short-lived processes, that end quickly and aren't readily visible in top(1).

Since this uses BPF, only the root user can use this tool.
.SH REQUIREMENTS
CONFIG_BPF and bpftrace.
.SH EXAMPLES
.TP
Trace all new processes calling execve():
#
.B execsnoop.bt
.SH FIELDS
.TP
TIME
Time of the exec() call, in milliseconds since program start.
.TP
PID
Process ID
.TP
ARGS
Process name and arguments (16 word maximum).
.SH OVERHEAD
This traces the execve() tracepoint and prints output for each event. As the
rate of this is generally expected to be low (< 100/s), the overhead is also
expected to be negligible. If you have an application that is spawning
a high rate of new processes for a reason (large build process), this could
cause a small amount of overhead: test and understand overhead before
use.
.SH SOURCE
This is from bpftrace.
.IP
https://github.com/iovisor/bpftrace
.PP
Also look in the bpftrace distribution for a companion _examples.txt file containing
example usage, output, and commentary for this tool.

This is a bpftrace version of the bcc tool of the same name. The bcc tool
provides more fields and options to customize the output.
.IP
https://github.com/iovisor/bcc
.SH OS
Linux
.SH STABILITY
Unstable - in development.
.SH AUTHOR
Brendan Gregg
.SH SEE ALSO
opensnoop(8)
