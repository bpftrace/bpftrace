#include "ast/pass_manager.h"

#include <ostream>

#include "ast/passes/printer.h"
#include "bpftrace.h"

namespace bpftrace::ast {

namespace {
void print(PassContext &ctx, const std::string &name, std::ostream &out)
{
  out << "\nAST after: " << name << std::endl;
  out << "-------------------\n";
  ast::Printer printer(ctx.ast_ctx, out);
  printer.print();
  out << std::endl;
}
} // namespace

void PassManager::AddPass(Pass p)
{
  passes_.push_back(std::move(p));
}

int PassManager::Run(PassContext &ctx)
{
  if (bt_debug.find(DebugStage::Ast) != bt_debug.end())
    print(ctx, "parser", std::cout);
  for (auto &pass : passes_) {
    pass.Run(ctx);
    if (bt_debug.find(DebugStage::Ast) != bt_debug.end())
      print(ctx, pass.name, std::cout);

    // If the number of errors is non-zero, stop and return.
    if (!ctx.ast_ctx.diagnostics().ok()) {
      ctx.ast_ctx.diagnostics().emit(out_);
      return 1;
    }
  }

  // Emit all remaining warnings generated by all passes.
  ctx.ast_ctx.diagnostics().emit(out_);
  return 0;
}

} // namespace bpftrace::ast
