// Simple assertion macro that will exit the entire script with an error code if the condition is not met.
//
// :param (bool) $cond: The condition to check
// :param (string) $msg: The message to print if the condition is not met
macro assert($cond, $msg) {
  if (!$cond) {
    errorf("assert failed: %s", $msg);
    exit(1);
  }
}

// Get the pid of the parent process
//
// :param (struct task_struct *) $task: The current task struct
// :last_expr (uint32): The pid of the parent process
macro ppid($task) {
    $task->real_parent->pid
}

// Asserts that a value is a literal.
//
// :param (literal) $v: The must-be literal value
macro static_assert_literal($v) {
  if ($v && false) {
    // This prune will be pruned if `$v && false` can be folded, it
    // can only be folded if `$v` is a literal of any kind.
    fail("value must evaluate to a literal");
  }
}

// Force a compile-time check.
//
// :param (literal) $v: The boolean value, must evaluate as a literal
// :param (string) $msg: The message to emit, must be a string literal
macro static_assert($v, $msg) {
  static_assert_literal($v);
  if (!$v) {
    fail($msg);
  }
}
