macro inc($x) { $x += 1; }

test:macro_mutates_variable
{
  $a = 1;
  inc($a);
  if ($a != 2) { return 1; }
}

macro inc2($x) { $x += 1; $x }

test:macro_assigns_to_last_expression
{
  $a = 1;
  $b = inc2($a);
  if ($a != 2 || $b != 2) { return 1; }
}

macro set_nonscalar(@x) { @x[1] = 2; }

test:macro_mutates_nonscalar_map
{
  @a[1] = 1;
  set_nonscalar(@a);
  if (@a[1] != 2) { return 1; }
  delete(@a[1]);
}

macro set_scalar(@x) { @x = 2; }

test:macro_mutates_scalar_map
{
  @b = 1;
  set_scalar(@b);
  if (@b != 2) { return 1; }
  delete(@b);
}

macro add(x) { let $y: typeof(x); if (true) { $y = 1 } x + $y  }

test:macro_renames_internal_variables
{
  if (add(1) != 2) { return 1; }
}

macro get(@x) { 1 + @x[1] }

test:macro_reads_passed_map
{
  @c[1] = 1;
  if (get(@c) != 2) { return 1; }
  delete(@c[1]);
}

macro add1(x) { x + 1 }
macro add2(y) { y + add1(y) }
macro add3(z) { z + add2(z) }

test:macro_calls_other_macros_expressions
{
  if (add3(1) != 4) { return 1; }
}

macro add1s($x) { $x += 1; }
macro add2s($y) { add1s($y); $y += 1; }
macro add3s($z) { add2s($z); $z += 1; }

test:macro_calls_other_macros_statements
{
  $a = 1;
  add3s($a);
  if ($a != 4) { return 1; }
}

macro add2_ord(x) { x + add1_ord(x) }
macro add3_ord(x) { x + add2_ord(x) }
macro add1_ord(x) { x + 1 }

test:macro_definition_order_does_not_matter
{
  if (add3_ord(1) != 4) { return 1; }
}

macro add_one(x) { x + 1 }

test:macro_accepts_arbitrary_expressions_without_vars
{
  $a = 1;
  if (add_one(1 + 1) != 3) { return 1; }
}

test:macro_accepts_arbitrary_expressions_with_vars
{
  $a = 1;
  if (add_one($a + 1) != 3) { return 1; }
}

macro add_two(x) { x + 2 }
macro add_one_nested(x) { add_two(x + 1) + 1 }

test:macro_accepts_arbitrary_expressions_nested
{
  $a = 1;
  if (add_one_nested($a + 1) != 6) { return 1; }
}

test:macro_accepts_arbitrary_expressions_with_maps
{
  @d = 1;
  if (add_one(@d + 1) != 3) { return 1; }
  delete(@d);
}

macro inc_multi($x) { $x += 1; }

test:macro_called_multiple_times
{
  $a = 1;
  inc_multi($a);
  inc_multi($a);
  inc_multi($a);
  if ($a != 4) { return 1; }
}

macro loop_map(@a) { let $x = 1; for ($kv : @a) { $x += $kv.1;} $x }

test:macro_for_loops
{
  @e[1] = 5;
  @e[2] = 10;
  if (loop_map(@e) != 16) { return 1; }
  delete(@e[1]);
  delete(@e[2]);
}

macro add1_scope($x) { $x + 1 }
macro add2_scope($x) { $x + 2 }

test:macro_works_in_nested_scopes
{
  $a = 1;
  if ($a == 1) {
    if (add2_scope($a) != 3) { return 1; }
  } else {
    if (add1_scope($a) != 2) { return 1; }
  }
}

macro inc_rename(x) { $y = x + 1; $y }

test:macro_renames_variables_prevent_collision
{
  $y = 2;
  $z = inc_rename(5);
  if ($y != 2 || $z != 6) { return 1; }
}

macro inc_decl(x) { let $y = x + 1; $y }

test:macro_renames_decl_variables_prevent_collision
{
  $y = 2;
  $z = inc_decl(5);
  if ($y != 2 || $z != 6) { return 1; }
}

test:macro_part_of_expression_passed_to_macro
{
  $a = add_one(add_one(1) + 1);
  if ($a != 4) { return 1; }
}

macro one() { $x = 1; $x }

test:macro_expands_idents_if_matching
{
  $a = one;
  if ($a != 1) { return 1; }
}

macro inc_multi_expr(x) { $y = x + 1; $z = x + 2; $y + $z }

test:macro_replaces_expression_multiple_locations
{
  $y = 2;
  if (inc_multi_expr({ $y +=1; $y }) != 10) { return 1; }
}

test:macro_called_multiple_times_in_expression
{
  if (add_one(add_one(add_one(1))) != 4) { return 1; }
}

macro add_zero() { 2 }
macro ident(add_zero) { add_zero }

test:macro_arg_idents_take_precedence
{
  if (ident(1) != 1) { return 1; }
}

macro first_key(@x) { let $x = 0; for ($k : @x) { $x = $k.0; break; } $x }

test:macro_replaces_all_instances
{
  @f[1] = 0;
  @g[2] = 0;
  if (first_key(@f) != 1 || first_key(@g) != 2) { return 1; }
  delete(@f[1]);
  delete(@g[2]);
}

macro second_indirect(a, b) { a + b }
macro first_indirect(@b, $x) { second_indirect(@b, $x) }

test:macro_indirect_map_variable_access
{
  @h = 5;
  $y = 1;
  if (first_indirect(@h, $y) != 6) { return 1; }
  delete(@h);
}
