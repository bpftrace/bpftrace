test:map_one_key_elements {
  @map[16] = 32;
  $found = 0;
  for ($kv : @map) {
    if ($kv.0 == 16 && $kv.1 == 32) {
      $found = 1;
    }
  }
  if ($found != 1) {
    return 1;
  }
  clear(@map);
}

test:map_two_key_elements {
  @map2[16,17] = 32;
  $found = 0;
  for ($kv : @map2) {
    if ($kv.0.0 == 16 && $kv.0.1 == 17 && $kv.1 == 32) {
      $found = 1;
    }
  }
  if ($found != 1) {
    return 1;
  }
  clear(@map2);
}

test:map_create_map_in_body {
  @map[16] = 32;
  @map[64] = 128;
  for ($kv : @map) {
    @new[$kv.1] = $kv.0;
  }
  if (@new[32] != 16 || @new[128] != 64) {
    return 1;
  }
  clear(@map);
  clear(@new);
}

// Note: nested for loops can cause BPF complexity issues, omitting this test

test:variable_context_read_only {
  @map[0] = 0;
  $var = 123;
  $result = 0;
  for ($kv : @map) {
    $result = $var;
  }
  if ($result != 123) {
    return 1;
  }
  clear(@map);
}

test:variable_context_update {
  @map[0] = 0;
  @map[1] = 1;
  $var = 123;
  for ($kv : @map) {
    $var *= 2;
  }
  if ($var != 492) {
    return 1;
  }
  clear(@map);
}

test:variable_context_string {
  @map[0] = 0;
  @map[1] = 1;
  $var = "abc";
  for ($kv : @map) {
    $var = "def";
  }
  if ($var != "def") {
    return 1;
  }
  clear(@map);
}

test:variable_context_multiple {
  @map[0] = 0;
  $var1 = 123;
  $var2 = "abc";
  $result1 = 0;
  $result2 = "";
  for ($kv : @map) {
    $result1 = $var1;
    $result2 = $var2;
  }
  if ($result1 != 123 || $result2 != "abc") {
    return 1;
  }
  clear(@map);
}

test:range_basic {
  $count = 0;
  for ($i : 0..5) {
    $count++;
  }
  if ($count != 5) {
    return 1;
  }
}

test:range_with_variables {
  $start = 2;
  $end = 7;
  $count = 0;
  for ($i : $start..$end) {
    $count++;
  }
  if ($count != 5) {
    return 1;
  }
}

test:range_with_expressions {
  $count = 0;
  for ($i : (1+1)..(2*4)) {
    $count++;
  }
  if ($count != 6) {
    return 1;
  }
}


test:range_with_zero_iterations {
  $count = 0;
  for ($i : 1..0) {
    $count++;
  }
  if ($count != 0) {
    return 1;
  }
}

test:range_with_negative_start {
  $sum = 0;
  for ($i : (-3)..3) {
    $sum += $i;
  }
  if ($sum != -3) {
    return 1;
  }
}

test:range_with_same_start_and_end {
  $count = 0;
  for ($i : 5..5) {
    $count++;
  }
  if ($count != 0) {
    return 1;
  }
}

test:range_with_variable_modification {
  $sum = 0;
  for ($i : 1..5) {
    $sum += $i;
  }
  if ($sum != 10) {
    return 1;
  }
}


test:range_with_break {
  $count = 0;
  for ($i : 1..4) {
    if ($i == 2) {
      break;
    }
    $count++;
  }
  if ($count != 1) {
    return 1;
  }
}

test:range_with_continue {
  $sum = 0;
  for ($i : 1..4) {
    if ($i == 2) {
      continue;
    }
    $sum += $i;
  }
  if ($sum != 4) {
    return 1;
  }
}
