NAME if_gt
RUN bpftrace -v -e 'i:ms:1 {$a = 10; if ($a > 2) { $a = 20 } printf("a=%d\n", $a); exit();}'
EXPECT a=20
TIMEOUT 5

NAME if_lt
RUN bpftrace -v -e 'i:ms:1 {$a = 10; if ($a < 2) { $a = 20 } printf("a=%d\n", $a); exit();}'
EXPECT a=10
TIMEOUT 5

NAME ifelse_go_else
RUN bpftrace -v -e 'i:ms:1 {$a = ""; if (10 < 2) { $a = "hi" } else {$a = "hello"} printf("a=%s\n", $a); exit();}'
EXPECT a=hello
TIMEOUT 5

NAME ifelse_go_if
RUN bpftrace -v -e 'i:ms:1 {$a = ""; if (10 > 2) { $a = "hi" } else {$a = "hello"} printf("a=%s\n", $a); exit();}'
EXPECT a=hi
TIMEOUT 5

NAME unroll
RUN bpftrace -v -e 'i:ms:1 {$a = 1; unroll (10) { $a = $a + 1; } printf("a=%d\n", $a); exit();}'
EXPECT a=11
TIMEOUT 5

NAME unroll_max_value
RUN bpftrace -v -e 'i:ms:1 {$a = 1; unroll (30) { $a = $a + 2; } printf("a=%d\n", $a); exit();}'
EXPECT unroll maximum value is 20
TIMEOUT 5

NAME unroll_min_value
RUN bpftrace -v -e 'i:ms:1 {$a = 1; unroll (0) { $a = $a + 2; } printf("a=%d\n", $a); exit();}'
EXPECT unroll minimum value is 1
TIMEOUT 5

NAME if_compare_and_print_string
RUN bpftrace -v -e 'BEGIN { if (comm == "bpftrace") { printf("comm: %s\n", comm);} exit();}'
EXPECT comm: bpftrace
TIMEOUT 5

NAME struct keyword optional when casting
RUN bpftrace -e 'struct Bar { int x; } struct Foo { struct Bar *bar; } i:ms:1 { $foo = (struct Foo *)0; @x = $foo->bar->x; exit()}'
EXPECT @x: 0
TIMEOUT 5

NAME struct positional string compare - equal returns true
RUN bpftrace -e 'BEGIN { if (str($1) == str($2)) { printf("I got %s\n", str($1));} exit();}' "hello" "hello"
EXPECT I got hello
TIMEOUT 5

NAME struct positional string compare - equal returns false
RUN bpftrace -e 'BEGIN { if (str($1) == str($2)) { printf("I got %s\n", str($1));} else { printf("not equal\n");} exit();}' "hi" "hello"
EXPECT not equal
TIMEOUT 5

NAME struct positional string compare - not equal
RUN bpftrace -e 'BEGIN { if (str($1) != str($2)) { printf("I got %s\n", str($1));} else { printf("not equal\n");} exit();}' "hello" "hello"
EXPECT not equal
TIMEOUT 5

NAME optional_positional_int
RUN bpftrace -e 'BEGIN { printf("-%d-\n", $1); exit() }'
EXPECT -0-
TIMEOUT 1

NAME optional_positional_str
RUN bpftrace -e 'BEGIN { printf("-%s-\n", str($1)); exit() }'
EXPECT --
TIMEOUT 1

NAME positional arg count
RUN bpftrace -v -e 'BEGIN { printf("got %d args: %s %d\n", $#, str($1), $2); exit();}' "one" 2
EXPECT got 2 args: one 2
TIMEOUT 5

NAME lhist can be cleared
RUN bpftrace -e 'BEGIN{ @[1] = lhist(3,0,10,1); clear(@); exit() }'
EXPECT .*
TIMEOUT 1

NAME hist can be cleared
RUN bpftrace -e 'BEGIN{ @[1] = hist(1); clear(@); exit() }'
EXPECT .*
TIMEOUT 1

NAME stats can be cleared
RUN bpftrace -e 'BEGIN{ @[1] = stats(1); clear(@); exit() }'
EXPECT .*
TIMEOUT 1

NAME avg can be cleared
RUN bpftrace -e 'BEGIN{ @[1] = avg(1); clear(@); exit() }'
EXPECT .*
TIMEOUT 1
