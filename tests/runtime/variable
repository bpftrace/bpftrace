NAME global_int
PROG i:ms:1 {@a = 10; printf("%d\n", @a); exit();}
EXPECT @a: 10

NAME global_string
PROG i:ms:1 {@a = "hi"; printf("%s\n", @a); exit();}
EXPECT @a: hi

NAME global_buf
PROG i:ms:1 {@a = buf("hi", 2); printf("%r\n", @a); exit();}
EXPECT @a: hi

NAME local_int
PROG i:ms:1  {$a = 10; printf("a=%d\n", $a); exit();}
EXPECT a=10

NAME local_string
PROG i:ms:1  {$a = "hi"; printf("a=%s\n", $a); exit();}
EXPECT a=hi

NAME local_buf
PROG i:ms:1 {$a = buf("hi", 2); printf("a=%r\n", $a); exit();}
EXPECT a=hi

NAME buf_equality
PROG i:ms:1 {$a = buf("hi", 2); $b = buf("bye", 3); printf("equal=%d, unequal=%d\n", $a == $a, $a != $b); exit();}
EXPECT equal=1, unequal=1

NAME global_associative_arrays
PROG BEGIN { @map[123] = 456; } END { printf("val: %d\n", @map[123]); exit(); }
EXPECT val: 456

NAME scratch
PROG BEGIN { @map[123] = 456; } END { $val = @map[123]; printf("val: %d\n", $val); exit(); }
EXPECT val: 456

NAME 32-bit tracepoint arg
PROG tracepoint:syscalls:sys_enter_openat /comm == "syscall"/ { $i = args.flags; printf("openflags: %d\n", $i); if ($i == 64) { exit() } }
EXPECT openflags: 64
AFTER ./testprogs/syscall openat

NAME tracepoint arg casts in predicates
RUN {{BPFTRACE}} -e 'tracepoint:syscalls:sys_enter_wait4 /args.ru/ { @ru[tid] = args.ru; } tracepoint:syscalls:sys_exit_wait4 /@ru[tid]/ { @++; exit(); }' -c ./testprogs/wait4_ru
EXPECT @: 1

NAME variable string type resize
PROG BEGIN { $x = "hello"; $x = "hi"; printf("%s\n", $x); exit(); }
EXPECT hi
TIMEOUT 2

NAME map string type resize
PROG BEGIN { @ = "hello"; } i:ms:1 { @ = "hi"; exit(); }
EXPECT @: hi
TIMEOUT 2

NAME map key string type resize
PROG BEGIN { @["hello"] = 0; } i:ms:1 { @["hi"] = 1; exit(); }
EXPECT @[hi]: 1
TIMEOUT 2

NAME map multi-key string type resize
PROG BEGIN { @["hello", 0] = 0; } i:ms:1 { @["hi", 1] = 1; exit(); }
EXPECT @[hi, 1]: 1
TIMEOUT 2

NAME map tuple string resize
PROG BEGIN { @[1] = ("hi", 1); @[1] = ("hellolongstr", 2); @[1] = ("by", 3); exit(); }
EXPECT @[1]: (by, 3)
TIMEOUT 2

NAME map key tuple string resize
PROG BEGIN { @["hi", 1] = 1; @["hellolongstr", 2] = 2; @["by", 3] = 3; exit(); }
EXPECT @[hi, 1]: 1
EXPECT @[hellolongstr, 2]: 2
EXPECT @[by, 3]: 3
TIMEOUT 2

NAME variable tuple string resize
PROG BEGIN { $a = ("hi", 1); print(($a)); $a = ("hellolongstr", 2); print(($a)); $a = ("by", 3); print(($a)); exit(); }
EXPECT (hi, 1)
EXPECT (hellolongstr, 2)
EXPECT (by, 3)
TIMEOUT 2

NAME variable nested tuple string resize
PROG BEGIN { $a = ("hi", ("hellolongstr", 2)); print(($a)); $a = ("hellolongstr", ("hi", 5)); print(($a)); exit(); }
EXPECT (hi, (hellolongstr, 2))
EXPECT (hellolongstr, (hi, 5))
TIMEOUT 2

NAME map nested tuple string resize
PROG BEGIN { @[1] = ("hi", ("hellolongstr", 2)); @[1] = ("hellolongstr", ("hi", 5)); exit(); }
EXPECT @[1]: (hellolongstr, (hi, 5))
TIMEOUT 2

NAME map key nested tuple string resize
PROG BEGIN { @["hi", ("hellolongstr", 2)] = 1; @["hellolongstr", ("hi", 5)] = 2; exit(); }
EXPECT @[hi, (hellolongstr, 2)]: 1
EXPECT @[hellolongstr, (hi, 5)]: 2
TIMEOUT 2

NAME map key tuple with casted ints
PROG BEGIN { @a[(int16)-1, ((int32)-2, 3)] = 10; @a[5, (6, 7)] = 11; $c = ((int8)-4, ((int16)-5, -6)); @a[$c] = 12; exit(); }
EXPECT @a[-4, (-5, -6)]: 12
EXPECT @a[-1, (-2, 3)]: 10
EXPECT @a[5, (6, 7)]: 11
TIMEOUT 2
