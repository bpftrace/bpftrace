NAME Struct pointer math
PROG struct A {int32_t a; int32_t b; char c[28] }; begin { $a=(struct A*) 1024; printf("%lu - 5 x %lu = %lu\n", $a, sizeof(struct A), $a-5);  }
EXPECT 1024 - 5 x 36 = 844

NAME Pointer walk through struct
RUN {{BPFTRACE}} runtime/scripts/struct_walk.bt -c ./testprogs/struct_walk
EXPECT a: 45 b: 1000

NAME Pointer arith with int32
PROG struct C { uint32_t a; }; uprobe:./testprogs/struct_walk:clear { $c = (struct C *)arg0; printf("ptr: %p\n", $c + $c.a); exit() }
AFTER ./testprogs/struct_walk
EXPECT_REGEX ^ptr: 0x[0-9a-z]+

NAME Pointer to pointer arithmetic and dereference
PROG uprobe:./testprogs/array_access:test_ptr_array { $p = (int32 **)arg0; @x = **($p + 1); exit(); }
EXPECT @x: 2
AFTER ./testprogs/array_access

NAME Pointer is truthy for if conditions
PROG begin { if (curtask) { @ = 1; }  }
EXPECT @: 1

NAME Pointer is truthy for tenary expressions
PROG begin { @ = curtask ? 1 : 2;  }
EXPECT @: 1

NAME Pointer is useable in logical and expressions
PROG begin { @ = (curtask && 0) ? 1 : 2;  }
EXPECT @: 2

NAME Pointer is useable in logical or expressions
PROG begin { @ = (curtask || 0) ? 1 : 2;  }
EXPECT @: 1

NAME pointer/int comparison
PROG begin { $a = (int64*) 0x32; $a++; if (0x32 < $a && $a > 0x32) { print("SUCCESS"); }  }
EXPECT SUCCESS
